generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
    output          = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String   @id @default(uuid())
    email      String   @unique
    password   String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    Profile              Profile?
    VerificationTokens   VerificationToken[]
    Attendances          Attendance[]
    UsuMembership        UsuMembership?
    MailingListRecipient MailingListRecipient?
}

model UsuMembership {
    user_id    String   @id
    number     String   @unique @db.Char(7)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Profile {
    user_id         String  @id
    handle          String  @unique @default(uuid())
    given_name      String?
    family_name     String?
    display_name    String?
    instrument_name String?
    bio             String?

    user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
    instrument Instrument? @relation(fields: [instrument_name], references: [name])
}

model VerificationToken {
    user_id    String
    token      String   @unique
    created_at DateTime @default(now())
    expires_at DateTime

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model MailingListRecipient {
    user_id    String   @id
    email      String   @unique
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum Semester {
    SEMESTER_1
    SEMESTER_2
}

model Attendance {
    user_id  String
    year     Int
    semester Semester
    week     Int      @db.SmallInt

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([user_id, year, semester, week])
}

model Instrument {
    name        String  @unique
    slug        String  @unique
    description String?

    Profiles Profile[]
}
