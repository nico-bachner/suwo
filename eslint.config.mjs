import pluginTypeScript from '@typescript-eslint/eslint-plugin'
import parserTypeScript from '@typescript-eslint/parser'
import pluginReact from 'eslint-plugin-react'
import pluginReactHooks from 'eslint-plugin-react-hooks'

export default [
  {
    // opt out of default ESLint behaviour
    ignores: ['**/*.{js,cjs,mjs}'],
  },
  {
    files: ['./src/**/*.ts', './src/**/*.tsx'],
    ignores: ['.next/**/*', 'storybook-static/**/*'],
    plugins: {
      typescript: pluginTypeScript,
      react: pluginReact,
      'react-hooks': pluginReactHooks,
    },
    languageOptions: {
      parser: parserTypeScript,
      parserOptions: {
        projectService: true,
        tsconfigRootDir: import.meta.dirname,
      },
    },
    rules: {
      'no-array-constructor': 'off',
      'no-implied-eval': 'off',
      'no-unused-expressions': 'off',
      'no-unused-vars': 'off',
      'no-useless-constructor': 'off',
      'no-throw-literal': 'off',
      'prefer-promise-reject-errors': 'off',
      'require-await': 'off',
      'no-return-await': 'off',

      /** TypeScript */
      'typescript/await-thenable': 'error',
      'typescript/ban-ts-comment': ['error', { minimumDescriptionLength: 10 }],
      'typescript/no-array-constructor': 'error',
      'typescript/no-array-delete': 'error',
      'typescript/no-base-to-string': 'error',
      'typescript/no-confusing-void-expression': 'error',
      'typescript/no-deprecated': 'error',
      'typescript/no-duplicate-enum-values': 'error',
      'typescript/no-duplicate-type-constituents': 'error',
      'typescript/no-dynamic-delete': 'error',
      'typescript/no-empty-object-type': 'error',
      'typescript/no-explicit-any': 'error',
      'typescript/no-extra-non-null-assertion': 'error',
      'typescript/no-extraneous-class': 'error',
      'typescript/no-floating-promises': 'error',
      'typescript/no-for-in-array': 'error',
      'typescript/no-implied-eval': 'error',
      'typescript/no-invalid-void-type': 'error',
      'typescript/no-meaningless-void-operator': 'error',
      'typescript/no-misused-new': 'error',
      'typescript/no-misused-promises': [
        'error',
        {
          checksVoidReturn: false,
        },
      ],
      'typescript/no-misused-spread': 'error',
      'typescript/no-mixed-enums': 'error',
      'typescript/no-namespace': 'error',
      'typescript/no-non-null-asserted-nullish-coalescing': 'error',
      'typescript/no-non-null-asserted-optional-chain': 'error',
      'typescript/no-non-null-assertion': 'error',
      'typescript/no-redundant-type-constituents': 'error',
      'typescript/no-require-imports': 'error',
      'typescript/no-this-alias': 'error',
      'typescript/no-unnecessary-boolean-literal-compare': 'error',
      'typescript/no-unnecessary-condition': 'error',
      'typescript/no-unnecessary-template-expression': 'error',
      'typescript/no-unnecessary-type-arguments': 'error',
      'typescript/no-unnecessary-type-assertion': 'error',
      'typescript/no-unnecessary-type-constraint': 'error',
      'typescript/no-unnecessary-type-parameters': 'error',
      'typescript/no-unsafe-argument': 'error',
      'typescript/no-unsafe-assignment': 'error',
      'typescript/no-unsafe-call': 'error',
      'typescript/no-unsafe-declaration-merging': 'error',
      'typescript/no-unsafe-enum-comparison': 'error',
      'typescript/no-unsafe-function-type': 'error',
      'typescript/no-unsafe-member-access': 'error',
      'typescript/no-unsafe-return': 'error',
      'typescript/no-unsafe-unary-minus': 'error',
      'typescript/no-unused-expressions': 'error',
      'typescript/no-unused-vars': 'error',
      'typescript/no-useless-constructor': 'error',
      'typescript/no-wrapper-object-types': 'error',
      'typescript/only-throw-error': 'error',
      'typescript/prefer-as-const': 'error',
      'typescript/prefer-literal-enum-member': 'error',
      'typescript/prefer-namespace-keyword': 'error',
      'typescript/prefer-promise-reject-errors': 'error',
      'typescript/prefer-reduce-type-parameter': 'error',
      'typescript/prefer-return-this-type': 'error',
      'typescript/related-getter-setter-pairs': 'error',
      'typescript/require-await': 'error',
      'typescript/restrict-plus-operands': [
        'error',
        {
          allowAny: false,
          allowBoolean: false,
          allowNullish: false,
          allowNumberAndString: false,
          allowRegExp: false,
        },
      ],
      'typescript/restrict-template-expressions': [
        'error',
        {
          allowAny: false,
          allowBoolean: false,
          allowNever: false,
          allowNullish: false,
          allowNumber: true,
          allowRegExp: false,
        },
      ],
      'typescript/return-await': ['error', 'error-handling-correctness-only'],
      'typescript/triple-slash-reference': 'error',
      'typescript/unbound-method': 'error',
      'typescript/unified-signatures': 'error',
      'typescript/use-unknown-in-catch-callback-variable': 'error',

      /** React */
      'react/display-name': 'error',
      'react/jsx-key': 'error',
      'react/jsx-no-comment-textnodes': 'error',
      'react/jsx-no-duplicate-props': 'error',
      'react/jsx-no-target-blank': 'error',
      'react/jsx-no-undef': 'error',
      'react/jsx-uses-vars': 'error',
      'react/no-children-prop': 'error',
      'react/no-danger-with-children': 'error',
      'react/no-deprecated': 'error',
      'react/no-direct-mutation-state': 'error',
      'react/no-find-dom-node': 'error',
      'react/no-is-mounted': 'error',
      'react/no-render-return-value': 'error',
      'react/no-string-refs': 'error',
      'react/no-unescaped-entities': 'error',
      'react/no-unknown-property': 'error',
      'react/no-unsafe': 'error',
      'react/prop-types': 'error',
      'react/require-render-return': 'error',
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'error',
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },
]
